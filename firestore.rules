
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for security rules
    function isOfficeMember(officeId) {
      return get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).exists;
    }

    function isOfficeAdminOrOwner(officeId) {
      let userRole = get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role;
      return userRole == 'Admin' || userRole == 'Owner';
    }

    // Top-level collection for user profiles
    match /userProfiles/{userId} {
      // Any authenticated user can read a profile (e.g., to get a name/avatar)
      allow get: if request.auth != null;
      // Users can only create, update, or delete their own profile
      allow create, update, delete: if request.auth.uid == userId;
    }

    // Top-level collection for user-specific data
    match /users/{userId}/{collection}/{docId} {
      // A user can manage their own documents (goals, notifications, etc.)
      allow read, write, delete: if request.auth.uid == userId;

      // Special rule: Allow an office admin/owner to CREATE a 'memberOfOffices'
      // document when they approve a request or add a member directly.
      // `docId` here will be the `officeId`.
      allow create: if collection == 'memberOfOffices' && isOfficeAdminOrOwner(docId);
    }
    
    // Top-level collection for offices
    match /offices/{officeId} {
      // Allow any authenticated user to QUERY for offices (e.g., by invite code).
      allow list: if request.auth.uid != null;
      
      // Allow members to GET their specific office details directly.
      allow get: if isOfficeMember(officeId);
      
      // Allow any authenticated user to create an office.
      allow create: if request.auth.uid != null;
      
      // Only the office owner can update or delete their office.
      allow update, delete: if get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
      
      // Subcollection: Office Members
      match /members/{memberUserId} {
        allow read: if isOfficeMember(officeId);
        allow create, delete: if isOfficeAdminOrOwner(officeId);
        // Admins/Owners can change roles; users can update their own workRole but not their system role.
        allow update: if isOfficeAdminOrOwner(officeId) || 
                       (request.auth.uid == memberUserId && !('role' in request.resource.data));
      }

      // Subcollection: Office Rooms
      match /rooms/{roomId} {
        allow read: if isOfficeMember(officeId);
        allow create, update, delete: if isOfficeAdminOrOwner(officeId);
      }
      
      // Subcollection: Activity Log
      match /activityLog/{activityId} {
        allow read: if isOfficeMember(officeId);
        // Rely on server-side validation for creates
        allow create: if request.auth.uid != null; 
      }

      // Subcollection: Tasks
      match /tasks/{taskId} {
        allow read, write: if isOfficeMember(officeId);
      }
      
      // Subcollection: Meetings
      match /meetings/{meetingId} {
        allow read, write: if isOfficeMember(officeId);
      }

      // Subcollection: General Chat Messages
      match /generalMessages/{messageId} {
        allow read, write: if isOfficeMember(officeId);
      }

      // Subcollection: Join Requests
      match /joinRequests/{requestId} {
        allow create: if request.auth.uid != null;
        allow read, update, delete: if isOfficeAdminOrOwner(officeId);
      }
    }
    
    // Top-level collection for Direct Message threads
    match /chatThreads/{threadId} {
      // Allow read/write if the user is a participant in the thread
      allow read, write: if request.auth.uid in resource.data.participantIds;
      
      // Subcollection: Messages within a thread
      match /messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds;
      }
    }
  }
}
