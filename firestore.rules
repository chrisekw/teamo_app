rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOfficeMember(officeId) {
      return request.auth.uid != null &&
             exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
    }

    function isOfficeAdminOrOwner(officeId) {
      // Ensure the user is a member before checking role to prevent errors on non-existent docs
      if (!isOfficeMember(officeId)) {
        return false;
      }
      let role = get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role;
      return role == 'Admin' || role == 'Owner';
    }

    function isOfficeOwner(officeId) {
       return request.auth.uid != null &&
              get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
    }
    
    // --- Top Level Collections for Users ---
    match /userProfiles/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    match /users/{userId}/{collection}/{docId} {
      // Allow users to manage their own subcollections (notifications, goals)
      allow read, write, delete: if request.auth.uid == userId;

      // Allow an office admin/owner to add a user to an office
      allow create: if collection == 'memberOfOffices' && isOfficeAdminOrOwner(docId);
      
      // Allow a user to remove their own office membership (leave office)
      allow delete: if collection == 'memberOfOffices' && request.auth.uid == userId;
    }

    // --- Top Level Collection for Chat ---
    match /chatThreads/{threadId} {
      function isParticipant() {
          // Check the existing document data to see if the user is a participant
          return get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds.hasAny([request.auth.uid]);
      }
      
      // Allow read/update only if user is a participant
      allow get, update: if isParticipant();
      allow list: if request.auth.uid != null; // Client query filters for user's threads
      allow create: if request.auth.uid in request.resource.data.participantIds;
      
      match /messages/{messageId} {
        // Allow read/create if user is a participant of the parent thread
        allow read, create: if isParticipant() && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if false; // Messages are immutable
      }
    }
    
    // --- Offices and Subcollections ---
    match /offices/{officeId} {
      allow list: if request.auth.uid != null;
      allow get: if isOfficeMember(officeId);
      allow create: if request.auth.uid != null;
      allow update: if isOfficeAdminOrOwner(officeId);
      allow delete: if isOfficeOwner(officeId);
      
      match /members/{memberUserId} {
        allow read, list: if isOfficeMember(officeId);
        allow create, update: if isOfficeAdminOrOwner(officeId);
        // Admin/owner can remove others. Members can remove themselves if not the owner.
        allow delete: if (isOfficeAdminOrOwner(officeId) && request.auth.uid != memberUserId) || 
                         (request.auth.uid == memberUserId && !isOfficeOwner(officeId));
      }

      match /rooms/{roomId} {
        allow read, list: if isOfficeMember(officeId);
        allow create, update, delete: if isOfficeAdminOrOwner(officeId);
      }
      
      match /activityLog/{activityId} {
        allow read, list: if isOfficeMember(officeId);
        allow write: if false; // Server-only writes
      }

      match /tasks/{taskId} {
        allow read, list, write: if isOfficeMember(officeId);
      }
      
      match /meetings/{meetingId} {
        allow read, list, write: if isOfficeMember(officeId);
      }

      match /generalMessages/{messageId} {
        allow read, list, create: if isOfficeMember(officeId);
        allow update, delete: if false;
      }

      match /joinRequests/{requestId} {
        allow create: if request.auth.uid != null;
        // Admins and owners can manage join requests
        allow read, list, update, delete: if isOfficeAdminOrOwner(officeId);
      }
    }
  }
}
