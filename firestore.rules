
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isMember(officeId) {
      return exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
    }

    function isOwner(officeId) {
        return get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role == 'Owner';
    }

    // USER PROFILES: Users can read any profile, but only write to their own.
    match /userProfiles/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // USER'S OFFICE MEMBERSHIPS: Users can only access their own list of offices.
    match /users/{userId}/memberOfOffices/{officeId} {
        allow read, write, delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // USER'S NOTIFICATIONS: Users can only access their own notifications.
    match /users/{userId}/notifications/{notificationId} {
        allow read, write, delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // GOALS (assumed to be a subcollection of users for now)
    match /users/{userId}/goals/{goalId} {
       allow read, write, delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // OFFICES:
    match /offices/{officeId} {
      // Allow authenticated users to find an office by its invitation code.
      allow list: if isAuthenticated();
      allow read: if isAuthenticated() && isMember(officeId);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(officeId);
      allow delete: if isAuthenticated() && isOwner(officeId);

        // JOIN REQUESTS:
        match /joinRequests/{requestId} {
            // Allow any authenticated user to create a join request.
            allow create: if isAuthenticated();
            // Only members (specifically owners/admins) of the office can read/update requests.
            allow read, update: if isAuthenticated() && isMember(officeId);
        }

        // MEMBERS:
        match /members/{memberId} {
           // Allow existing members to read the member list.
           allow read: if isAuthenticated() && isMember(officeId);
           // Only allow adding a member if it's the owner adding themselves during office creation
           // or an owner/admin approving a join request (logic handled in backend code, rule allows write for owners)
           allow write: if isAuthenticated() && isOwner(officeId);
           // Only owners can remove members (except themselves).
           allow delete: if isAuthenticated() && isOwner(officeId);
        }
        
        // ROOMS, TASKS, MEETINGS, ACTIVITY LOG: Only members can access.
        match /{subcollection}/{docId} {
            allow read, write: if isAuthenticated() && isMember(officeId);
        }
    }

    // CHAT THREADS: Only participants can read/write to a thread and its messages.
    match /chatThreads/{threadId} {
      // Helper function to check if the requesting user is a participant in the thread
      function isParticipant() {
        return isAuthenticated() && request.auth.uid in resource.data.participantIds;
      }
      // Helper function for create operations where 'resource' isn't available yet
      function isParticipantOnCreate() {
        return isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      }

      allow read, update: if isParticipant();
      allow create: if isParticipantOnCreate();
      allow delete: if false; // Disallow deleting threads for now.

      // MESSAGES SUBCOLLECTION:
      match /messages/{messageId} {
        // Check membership of the parent thread document to see if user can post/read messages
        function isParentThreadParticipant() {
            return isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds;
        }
        allow read, create: if isParentThreadParticipant();
        allow update, delete: if false; // Disallow editing/deleting messages for simplicity.
      }
    }
  }
}
