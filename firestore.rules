
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to reuse logic
    function isOfficeMember(officeId) {
      return get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).exists;
    }

    function isOfficeAdminOrOwner(officeId) {
      let userRole = get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role;
      return userRole == 'Admin' || userRole == 'Owner';
    }

    // User-specific data
    match /userProfiles/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    match /users/{userId}/{collection}/{docId} {
      // Allow a user to manage their own subcollections (like goals, notifications)
      allow read, write, delete: if request.auth.uid == userId;

      // FIX: This rule allows an office admin/owner to CREATE a 'memberOfOffices'
      // document in another user's profile when they approve a request or add a member.
      // `docId` here will be the `officeId`.
      allow create: if collection == 'memberOfOffices' && isOfficeAdminOrOwner(docId);
    }

    // Office data and subcollections
    match /offices/{officeId} {
      // Allow authenticated users to query offices (needed for "join by code")
      allow list: if request.auth.uid != null;
      
      // Allow members to get their specific office details directly.
      allow get: if isOfficeMember(officeId);
      
      allow create: if request.auth.uid != null;
      
      // Only the owner can update or delete the office document itself.
      allow update, delete: if get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;

      match /members/{memberUserId} {
        allow read: if isOfficeMember(officeId);
        allow create, delete: if isOfficeAdminOrOwner(officeId);
        // Allow users to update their own work role, but only admins can change system roles.
        allow update: if isOfficeAdminOrOwner(officeId) || 
                       (request.auth.uid == memberUserId && !('role' in request.resource.data));
      }

      match /rooms/{roomId} {
        allow read: if isOfficeMember(officeId);
        allow create, update, delete: if isOfficeAdminOrOwner(officeId);
      }
      
      match /activityLog/{activityId} {
        allow read: if isOfficeMember(officeId);
        // Rely on server-side validation for creation.
        allow create: if request.auth.uid != null;
      }

      match /tasks/{taskId} {
        allow read, write: if isOfficeMember(officeId);
      }
      
      match /meetings/{meetingId} {
        allow read, write: if isOfficeMember(officeId);
      }

      match /generalMessages/{messageId} {
        allow read, write: if isOfficeMember(officeId);
      }

      match /joinRequests/{requestId} {
        // Any authenticated user can create a request.
        allow create: if request.auth.uid != null;
        // Only the owner can read or process requests.
        allow read, update, delete: if get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
      }
    }
    
    // Direct Message (DM) chat threads
    match /chatThreads/{threadId} {
      allow read, write: if request.auth.uid in resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, write: if get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds;
      }
    }
  }
}
