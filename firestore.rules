rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isMember(officeId) {
      return exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
    }
    function isOwner(officeId) {
      return get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
    }
    function isAdmin(officeId) {
      let role = get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role;
      return role == 'Admin' || role == 'Owner';
    }

    // User Profiles: Users can read any profile, but only write to their own.
    match /userProfiles/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // User's private subcollections (goals, notifications, memberOfOffices etc.)
    match /users/{userId}/{subcollection}/{docId} {
        allow read, write: if request.auth.uid == userId;
    }

    // Offices collection
    match /offices/{officeId} {
      // Anyone authenticated can query for offices (needed for invite code lookup)
      allow list: if request.auth != null;

      // Only members can read office details directly.
      allow get: if isMember(officeId);
      
      // Anyone authenticated can create an office.
      allow create: if request.auth != null;

      // Only owners/admins can update office details.
      allow update: if isAdmin(officeId);
      
      // Only the owner can delete an office.
      allow delete: if isOwner(officeId);

      // Members subcollection
      match /members/{memberUserId} {
        allow get, list: if isMember(officeId);
        // Owner/Admins can add/update members.
        allow create, update: if isAdmin(officeId);
        // Owner/Admins can remove members. Users can remove themselves (leave), but not the owner.
        allow delete: if (isAdmin(officeId) && resource.data.role != 'Owner') || (request.auth.uid == memberUserId && resource.data.role != 'Owner');
      }

      // Rooms subcollection
      match /rooms/{roomId} {
        allow read: if isMember(officeId);
        allow create, update, delete: if isAdmin(officeId);
      }
      
      // Other subcollections (tasks, meetings, activityLog, etc.)
      match /{subcollection}/{docId} {
          allow read, write: if isMember(officeId);
      }

      // Join Requests subcollection
      match /joinRequests/{requestId} {
        allow get: if isOwner(officeId) || request.auth.uid == resource.data.requesterId;
        allow list: if isOwner(officeId);
        // Any authenticated user can create a request for themselves.
        allow create: if request.auth.uid == request.resource.data.requesterId;
        // Only the owner can approve/reject.
        allow update: if isOwner(officeId);
        allow delete: if isOwner(officeId);
      }
    }

    // Chat Threads: Only participants can access.
    match /chatThreads/{threadId} {
      allow read, write: if request.auth.uid in resource.data.participantIds;
      
      match /messages/{messageId} {
         allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds;
      }
    }
  }
}
