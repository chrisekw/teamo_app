rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User Profiles
    match /userProfiles/{userId} {
      // Users can create their own profile, and read/update it.
      allow read, update, create: if request.auth != null && request.auth.uid == userId;
      // Allow any authenticated user to read any profile (for showing names, avatars etc)
      allow get: if request.auth != null;
    }

    // Users collection (for subcollections)
    match /users/{userId} {
        allow read: if request.auth != null && request.auth.uid == userId;

        // Notifications subcollection
        match /notifications/{notificationId} {
            allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
        }
        
        // Goals subcollection
        match /goals/{goalId} {
             allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
        }

        // Offices the user is a member of (read-only link)
        match /memberOfOffices/{officeId} {
            allow read: if request.auth != null && request.auth.uid == userId;
            // Write is handled by office logic (approveJoinRequest, createOffice etc)
            allow write, delete: if false; // Deny direct modification
        }
    }
    
    // Offices collection
    match /offices/{officeId} {
      // ANY authenticated user can find an office by its code. This is broad but necessary for the client-side query.
      allow list: if request.auth != null;
      // Members can get the full office details
      allow get: if request.auth != null && exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));

      // Only owner can update/delete the office document itself
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
      // Anyone can create an office
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;

      // Members subcollection
      match /members/{memberId} {
        // Members of the office can read the member list
        allow get, list: if request.auth != null && exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
        // Owner/Admins can update/delete members
        allow update, delete: if request.auth != null && (get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid || get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role == 'Admin');
        // Creation is handled by approveJoinRequest
        allow create: if false; 
      }

      // Rooms subcollection
      match /rooms/{roomId} {
        // Members can read/list rooms
        allow get, list: if request.auth != null && exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
        // Owner/Admins can create/update/delete rooms
        allow write: if request.auth != null && (get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid || get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role == 'Admin');
      }

      // Tasks subcollection
      match /tasks/{taskId} {
         // Members can read/list tasks
        allow get, list: if request.auth != null && exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
        // Members can create/update/delete tasks
        allow write: if request.auth != null && exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
      }

      // Meetings subcollection
      match /meetings/{meetingId} {
        // Members can read/list meetings
        allow get, list: if request.auth != null && exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
        // Members can create/update/delete meetings
        allow write: if request.auth != null && exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
      }

      // Activity Log subcollection
      match /activityLog/{activityId} {
        // Members can read activity
        allow get, list: if request.auth != null && exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
        // Only internal logic should create activity logs, so deny client create/update/delete
        allow write: if false; 
      }

      // Join Requests subcollection
      match /joinRequests/{requestId} {
        // Owner/Admins can read/update requests
        allow read, update: if request.auth != null && (get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid || get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role == 'Admin');
        // Any authenticated user can create a request for themselves
        allow create: if request.auth != null && request.resource.data.requesterId == request.auth.uid;
      }
      
      // General Chat Messages subcollection
      match /generalMessages/{messageId} {
          allow read, create: if request.auth != null && exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
          allow update, delete: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      }
    }
    
    // Chat Threads collection (for DMs)
    match /chatThreads/{threadId} {
        allow read, write: if request.auth != null && request.auth.uid in resource.data.participantIds;
        allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;

        match /messages/{messageId} {
            allow read, create: if request.auth != null && get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds.hasAny([request.auth.uid]);
            allow update, delete: if request.auth != null && request.resource.data.senderId == request.auth.uid;
        }
    }
  }
}
