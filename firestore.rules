
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOfficeMember(officeId) {
      return request.auth.uid != null &&
             exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
    }

    function isOfficeAdminOrOwner(officeId) {
      if (!isOfficeMember(officeId)) {
        return false;
      }
      let userRole = get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role;
      return userRole == 'Admin' || userRole == 'Owner';
    }

    function isOfficeOwner(officeId) {
       return request.auth.uid != null &&
              get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
    }

    // --- Top Level User Collections ---
    match /userProfiles/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    match /users/{userId}/{subcollection}/{docId} {
      // User can manage their own notifications and goals.
      allow read, write: if request.auth.uid == userId && (subcollection == 'notifications' || subcollection == 'goals');

      // Rules for the 'memberOfOffices' subcollection.
      // User can read their own list of office memberships.
      allow read: if request.auth.uid == userId && subcollection == 'memberOfOffices';
      // An admin/owner of an office can add a user to it.
      allow create: if subcollection == 'memberOfOffices' && isOfficeAdminOrOwner(docId);
      // A user can remove themselves from an office (leave).
      allow delete: if subcollection == 'memberOfOffices' && request.auth.uid == userId;
    }

    // --- Top Level Chat Collection ---
    match /chatThreads/{threadId} {
      // User must be a participant to read, update or delete a thread.
      allow get, update, delete: if request.auth.uid in get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds;
      // Allow authenticated users to query for threads (client must filter).
      allow list: if request.auth.uid != null;
      // Allow user to create a thread if they are a participant.
      allow create: if request.auth.uid in request.resource.data.participantIds;

      match /messages/{messageId} {
        // Allow read/create messages only if user is a participant in the parent thread.
        allow read, create: if get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds.hasAny([request.auth.uid]);
        // Messages are immutable.
        allow update, delete: if false;
      }
    }

    // --- Top Level Offices Collection ---
    match /offices/{officeId} {
      allow list: if request.auth.uid != null;
      allow get: if isOfficeMember(officeId);
      allow create: if request.auth.uid != null;
      allow update: if isOfficeAdminOrOwner(officeId);
      allow delete: if isOfficeOwner(officeId);

      // Subcollections of an Office
      match /members/{memberUserId} {
        allow read, list: if isOfficeMember(officeId);
        allow create, update: if isOfficeAdminOrOwner(officeId);
        allow delete: if (isOfficeAdminOrOwner(officeId) && request.auth.uid != memberUserId) ||
                         (request.auth.uid == memberUserId && !isOfficeOwner(officeId));
      }

      match /rooms/{roomId} {
        allow read, list: if isOfficeMember(officeId);
        allow create, update, delete: if isOfficeAdminOrOwner(officeId);
      }

      match /activityLog/{activityId} {
        allow read, list: if isOfficeMember(officeId);
        allow write: if false; // Server-only writes
      }

      match /tasks/{taskId} {
        // Query requires an index, but rule allows any office member to list.
        // Client-side query must enforce creator/assignee visibility.
        allow read, list, create, update, delete: if isOfficeMember(officeId);
      }

      match /meetings/{meetingId} {
        // Query requires an index, but rule allows any office member to list.
        // Client-side query must enforce creator/participant visibility.
        allow read, list, create, update, delete: if isOfficeMember(officeId);
      }

      match /generalMessages/{messageId} {
        allow read, list, create: if isOfficeMember(officeId);
        allow update, delete: if false;
      }

      match /joinRequests/{requestId} {
        allow create: if request.auth.uid != null;
        allow read, list, update, delete: if isOfficeAdminOrOwner(officeId);
      }
    }
  }
}
