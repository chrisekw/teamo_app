
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User Profiles: Users can only read/write their own profile.
    match /userProfiles/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    // Chat Threads (DMs): Only participants can read/write.
    match /chatThreads/{threadId} {
      allow read, write: if request.auth.uid in resource.data.participantIds;

      // Messages within a thread
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds;
        allow update, delete: if false; // Messages are immutable
      }
    }
    
    // Offices and their subcollections
    match /offices/{officeId} {
      // Offices: Can be read by any authenticated user to find one by invite code.
      // Create/update/delete is restricted.
      allow get: if request.auth != null;
      // Allow querying by invite code, but not listing all offices.
      allow list: if request.auth != null && 'invitationCode' in request.query.where;
      allow create: if request.auth != null; 
      allow update, delete: if request.auth.uid == resource.data.ownerId;

      // Office Members
      match /members/{memberUserId} {
        // Allow a user to read their own member document (e.g., to check if they are a member).
        // Also allow any existing member of the office to read any other member's document.
        allow get: if request.auth.uid == memberUserId || exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
        
        // Allow only existing members of the office to list the members collection.
        allow list: if exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));

        // The owner can create/update members (e.g. approve join requests, change roles).
        allow create, update: if get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
        
        // The owner can remove members, but not themselves.
        allow delete: if get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid && request.auth.uid != memberUserId;
      }

      // Office Rooms
      match /rooms/{roomId} {
        allow read: if exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
        allow create, delete: if get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
        allow update: if get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
      }
      
      // Activity Log
      match /activityLog/{activityId} {
        allow read: if exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
        allow create: if request.auth != null; // Created by backend logic (or trusted client action)
        allow update, delete: if false;
      }

      // Join Requests
      match /joinRequests/{requestId} {
        allow create: if request.auth.uid == request.resource.data.requesterId;
        allow read: if request.auth.uid == resource.data.requesterId || get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
        allow list: if get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
        allow update: if get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
        allow delete: if false;
      }

      // General Office Chat Messages
      match /generalMessages/{messageId} {
        allow read, create: if exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
        allow update, delete: if false;
      }
      
      // Tasks within an office
      match /tasks/{taskId} {
        allow list: if exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
        allow get: if request.auth.uid == resource.data.creatorUserId || request.auth.uid in resource.data.assigneeIds;
        allow create: if request.auth.uid == request.resource.data.creatorUserId;
        allow update: if request.auth.uid == resource.data.creatorUserId || request.auth.uid in resource.data.assigneeIds;
        allow delete: if request.auth.uid == resource.data.creatorUserId;
      }

      // Meetings within an office
      match /meetings/{meetingId} {
         allow list: if exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
         allow get: if request.auth.uid == resource.data.creatorUserId || request.auth.uid in resource.data.participantIds;
         allow create: if request.auth.uid == request.resource.data.creatorUserId;
         allow update: if request.auth.uid == resource.data.creatorUserId;
         allow delete: if request.auth.uid == resource.data.creatorUserId;
      }
    }
    
    // User's denormalized list of offices they are a member of
    match /users/{userId}/memberOfOffices/{officeId} {
        allow read, list: if request.auth.uid == userId;
        // Creation/deletion handled by backend logic (approveJoinRequest, removeMemberFromOffice)
        allow create, delete, update: if request.auth != null; 
    }
    
    // User's Goals (now under users collection)
    match /users/{userId}/goals/{goalId} {
        allow read, list, create, update, delete: if request.auth.uid == userId;
    }
    
    // User's Notifications (now under users collection)
    match /users/{userId}/notifications/{notificationId} {
        allow read, list, create, update, delete: if request.auth.uid == userId;
    }
  }
}
