rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for security rules
    function isOfficeMember(officeId) {
      return get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).exists;
    }

    function isOfficeAdminOrOwner(officeId) {
      let userRole = get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role;
      return userRole == 'Admin' || userRole == 'Owner';
    }

    // User profiles can be created by any authenticated user, but only managed by themselves.
    match /userProfiles/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    // Users can manage their own subcollections (notifications, goals, etc.)
    // Admins/Owners are granted specific permissions to write 'memberOfOffices' docs for others.
    match /users/{userId}/{collection}/{docId} {
      allow read, write, delete: if request.auth.uid == userId;
      // FIX: This rule allows an office owner or admin to CREATE a 'memberOfOffices'
      // document when they approve a request or add a member directly.
      // `docId` here will be the `officeId`.
      allow create: if collection == 'memberOfOffices' && isOfficeAdminOrOwner(docId);
    }
    
    // Rules for the 'offices' collection and its subcollections
    match /offices/{officeId} {
      // Allow any authenticated user to QUERY for offices (e.g., by invite code).
      allow list: if request.auth.uid != null;
      
      // Allow members to GET their specific office details directly.
      allow get: if isOfficeMember(officeId);
      
      // Allow any authenticated user to create an office.
      allow create: if request.auth.uid != null;
      
      // Only Admins or the office owner can update or delete their office.
      allow update: if isOfficeAdminOrOwner(officeId);
      allow delete: if resource.data.ownerId == request.auth.uid;
      
      // Office member management
      match /members/{memberUserId} {
        allow read, list: if isOfficeMember(officeId);
        allow create, delete: if isOfficeAdminOrOwner(officeId);
        // Admins/Owners can change roles; users can update their own profile info but not their role.
        allow update: if isOfficeAdminOrOwner(officeId) || 
                       (request.auth.uid == memberUserId && !('role' in request.resource.data));
      }

      // Office room management
      match /rooms/{roomId} {
        allow read, list: if isOfficeMember(officeId);
        allow create, update, delete: if isOfficeAdminOrOwner(officeId);
      }
      
      // Activity logs can be read by members, but created by any authenticated member (server-side validates).
      match /activityLog/{activityId} {
        allow read, list: if isOfficeMember(officeId);
        allow create: if request.auth.uid != null;
      }

      // Tasks and Meetings are now more specific
      match /tasks/{taskId} {
        allow get: if isOfficeMember(officeId);
        allow list: if isOfficeMember(officeId);
        allow create, update, delete: if isOfficeMember(officeId);
      }
      
      match /meetings/{meetingId} {
        allow get: if isOfficeMember(officeId);
        allow list: if isOfficeMember(officeId);
        allow create, update, delete: if isOfficeMember(officeId);
      }

      match /generalMessages/{messageId} {
        allow read, list, create: if isOfficeMember(officeId);
      }

      match /joinRequests/{requestId} {
        allow create: if request.auth.uid != null;
        allow read, list, update, delete: if isOfficeAdminOrOwner(officeId);
      }
    }
    
    // Direct message threads are private to participants.
    match /chatThreads/{threadId} {
      allow get, update: if request.auth.uid in resource.data.participantIds;
      allow list: if request.auth.uid != null; // Query is filtered on the client
      allow create: if request.auth.uid in request.resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, list, create: if request.auth.uid in get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds;
      }
    }
  }
}
