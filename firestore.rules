rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isTheUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isOfficeMember(officeId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
    }

    function isOfficeAdminOrOwner(officeId) {
      return isOfficeMember(officeId) &&
             (get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role in ['Admin', 'Owner']);
    }
    
    // Used for office creation, where the office doc doesn't exist yet but is part of the same write operation.
    function isOwnerOfNewOffice() {
       return isAuthenticated() &&
              request.resource.data.ownerId == request.auth.uid;
    }
    
    // Used for existing offices.
    function isOwnerOfExistingOffice(officeId) {
       return isAuthenticated() &&
              get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
    }


    // --- USER DATA (Profiles and User-Specific Subcollections) ---
    match /users/{userId} {
      // A user can only access their own subcollections.
      allow read, write: if isTheUser(userId);
    }

    match /userProfiles/{userId} {
      // Any authenticated user can look up profiles. Required for "add by email" and "view profile".
      allow list, get: if isAuthenticated();
      // A user can only create, update, or delete their own profile.
      allow create, update, delete: if isTheUser(userId);
    }


    // --- CHAT DATA ---
    match /chatThreads/{threadId} {
      function isParticipant() {
        // Use `resource.data` for create/update rules, and `get()` for read/delete.
        return request.auth.uid in (request.resource.data.participantIds != null ? request.resource.data.participantIds : get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds);
      }

      allow read, write: if isAuthenticated() && isParticipant();

      match /messages/{messageId} {
        allow read: if isAuthenticated() && isParticipant();
        // A user must be a participant AND the sender to create a message.
        allow create: if isAuthenticated() && isParticipant() && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if false; // Messages are immutable.
      }
    }

    // --- OFFICE DATA ---
    match /offices/{officeId} {
      allow get: if isOfficeMember(officeId);
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && isOwnerOfNewOffice();
      allow update: if isOfficeAdminOrOwner(officeId);
      allow delete: if isOwnerOfExistingOffice(officeId);

      // --- Subcollections of an Office ---
      match /members/{memberUserId} {
        allow read, list: if isOfficeMember(officeId);
        // An admin can add a new member.
        // A user can also add themselves if they are the designated owner of the office.
        allow create: if isOfficeAdminOrOwner(officeId) || (isTheUser(memberUserId) && isOwnerOfExistingOffice(officeId));
        allow update: if isOfficeAdminOrOwner(officeId);
        // An admin can remove another member. A member can remove themselves unless they are the owner.
        allow delete: if (isOfficeAdminOrOwner(officeId) && request.auth.uid != memberUserId) || (isTheUser(memberUserId) && !isOwnerOfExistingOffice(officeId));
      }

      match /joinRequests/{requestId} {
        allow create: if isAuthenticated();
        allow read, list, update, delete: if isOfficeAdminOrOwner(officeId);
      }

      match /generalMessages/{messageId} {
        // A member can create a message and must be the sender.
        allow create: if isOfficeMember(officeId) && request.resource.data.senderId == request.auth.uid;
        allow read, list: if isOfficeMember(officeId);
        allow update, delete: if false;
      }

      match /activityLog/{activityId} {
        allow create, read, list: if isOfficeMember(officeId);
        allow update, delete: if false; // Logs are immutable.
      }
      
      // Default rules for collaborative office subcollections
      match /tasks/{taskId} {
        allow read, list, create, update: if isOfficeMember(officeId);
        allow delete: if isOfficeAdminOrOwner(officeId); // Only admins/owners can delete
      }
      match /goals/{goalId} {
        allow read, list, create, update: if isOfficeMember(officeId);
        allow delete: if isOfficeAdminOrOwner(officeId); // Only admins/owners can delete
      }
      match /meetings/{meetingId} {
        allow read, list, create, update: if isOfficeMember(officeId);
        allow delete: if isOfficeAdminOrOwner(officeId); // Only admins/owners can delete
      }
      match /rooms/{roomId} {
        allow read, list, create, update: if isOfficeMember(officeId);
        allow delete: if isOfficeAdminOrOwner(officeId); // Only admins/owners can delete
      }
    }
  }
}
