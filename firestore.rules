rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOfficeMember(officeId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
    }

    function isOfficeAdminOrOwner(officeId) {
      if (!isOfficeMember(officeId)) {
        return false;
      }
      let userRole = get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role;
      return userRole == 'Admin' || userRole == 'Owner';
    }

    function isOfficeOwner(officeId) {
       return isAuthenticated() &&
              get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
    }

    // --- Top Level User Collections ---
    match /userProfiles/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if isAuthenticated();
    }

    match /users/{userId}/{subcollection}/{docId} {
      // User can manage their own notifications and goals.
      allow read, write: if request.auth.uid == userId && (subcollection == 'notifications' || subcollection == 'goals');

      // Rules for the 'memberOfOffices' subcollection.
      // User can read their own list of office memberships.
      allow read: if request.auth.uid == userId && subcollection == 'memberOfOffices';
      // An admin/owner of an office can add a user to it when they are approved.
      allow create: if subcollection == 'memberOfOffices' && isOfficeAdminOrOwner(docId);
      // A user can remove themselves from an office (leave). This fixes the "leave office" error.
      allow delete: if subcollection == 'memberOfOffices' && request.auth.uid == userId;
    }

    // --- Top Level Chat Collection ---
    match /chatThreads/{threadId} {
      function isParticipant() {
          return get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds.hasAny([request.auth.uid]);
      }

      allow get, update: if isParticipant();
      allow list: if isAuthenticated(); // Client query must filter
      allow create: if request.auth.uid in request.resource.data.participantIds;

      match /messages/{messageId} {
        // This rule now correctly checks if the sender is a participant before allowing message creation.
        // It also ensures a user can only send messages as themselves.
        allow read, create: if isParticipant() && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if false; // Messages are immutable
      }
    }

    // --- Top Level Offices Collection ---
    match /offices/{officeId} {
      allow list: if isAuthenticated();
      allow get: if isOfficeMember(officeId);
      allow create: if isAuthenticated();
      allow update: if isOfficeAdminOrOwner(officeId);
      allow delete: if isOfficeOwner(officeId);

      match /members/{memberUserId} {
        allow read, list: if isOfficeMember(officeId);
        allow create, update: if isOfficeAdminOrOwner(officeId);
        allow delete: if (isOfficeAdminOrOwner(officeId) && request.auth.uid != memberUserId) ||
                         (request.auth.uid == memberUserId && !isOfficeOwner(officeId));
      }

      match /rooms/{roomId} {
        allow read, list: if isOfficeMember(officeId);
        allow create, update, delete: if isOfficeAdminOrOwner(officeId);
      }

      match /activityLog/{activityId} {
        allow read, list: if isOfficeMember(officeId);
        allow write: if false; // Server-only writes
      }

      match /tasks/{taskId} {
        allow read, list, create, update, delete: if isOfficeMember(officeId);
      }

      match /meetings/{meetingId} {
        allow read, list, create, update, delete: if isOfficeMember(officeId);
      }

      match /generalMessages/{messageId} {
        allow read, list, create: if isOfficeMember(officeId);
        allow update, delete: if false;
      }

      match /joinRequests/{requestId} {
        allow create: if isAuthenticated();
        allow read, list, update, delete: if isOfficeAdminOrOwner(officeId);
      }
    }
  }
}
