
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    function isMember(officeId) {
      return isAuth() && exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
    }
    function isOwner(officeId) {
      return isAuth() && get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
    }
    function isAdmin(officeId) {
       return isOwner(officeId) || (isMember(officeId) && get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role == 'Admin');
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow read: if isAuth();
      allow write: if isUser(userId);
    }
    
    // User's office list
    match /users/{userId}/{document=**} {
      allow read, write: if isUser(userId);
    }

    // Chat Threads
    match /chatThreads/{threadId} {
      match /{document=**} {
        allow read, write: if isAuth() && request.auth.uid in resource.data.participantIds;
      }
    }

    // Offices
    match /offices/{officeId} {
      // Any authenticated user can try to create an office.
      allow create: if isAuth();
      // Only office owner can update office details (e.g., name, banner).
      allow update: if isOwner(officeId);
      // Only office owner can delete the entire office.
      allow delete: if isOwner(officeId);

      // Office-level subcollections
      
      // Tasks
      match /tasks/{taskId} {
        allow get: if isMember(officeId) && (resource.data.creatorUserId == request.auth.uid || request.auth.uid in resource.data.assigneeIds);
        allow list: if isMember(officeId);
        allow create: if isMember(officeId);
        allow update, delete: if isMember(officeId) && (resource.data.creatorUserId == request.auth.uid || isAdmin(officeId));
      }

      // Meetings
      match /meetings/{meetingId} {
        allow get: if isMember(officeId) && (resource.data.creatorUserId == request.auth.uid || request.auth.uid in resource.data.participantIds);
        allow list: if isMember(officeId);
        allow create: if isMember(officeId);
        allow update, delete: if isOwner(officeId);
      }
      
      // Activity Log - Members can read, no client writes
      match /activityLog/{activityId} {
        allow read: if isMember(officeId);
        allow write: if false; // Server-only writes
      }
      
      // Members - Can be read by any other member, updated by admin/owner
      match /members/{memberId} {
        // A user can check if they are a member, and members can see other members.
        allow get: if isMember(officeId) || isUser(memberId);
        allow list: if isMember(officeId);
        
        allow create: if isOwner(officeId); // Only owner can add members (via join requests)
        allow update: if isAdmin(officeId);
        allow delete: if isOwner(officeId) && request.auth.uid != memberId; // Owner can remove others
      }

      // Rooms - Readable by members, writable by owner
      match /rooms/{roomId} {
        allow read: if isMember(officeId);
        allow create, update, delete: if isOwner(officeId);
      }
      
      // General Messages - Readable/writable by members
      match /generalMessages/{messageId} {
        allow read, write: if isMember(officeId);
      }

      // Join Requests - Readable by owner or the user who made the request. Writable by any authenticated user (to create).
      match /joinRequests/{requestId} {
        // Owner can see all requests. A user can see their own request.
        allow get: if isOwner(officeId) || (isAuth() && resource.data.requesterId == request.auth.uid);
        // Only owner can list all requests. Users can query for their own request.
        allow list: if isOwner(officeId);
        allow update: if isOwner(officeId); // Only owner can approve/reject.
        allow create: if isAuth(); // Any auth user can create a request.
      }
      
       // Main office doc can be read by its members.
      allow get: if isMember(officeId);
      // Any authenticated user can query the offices collection to find one by invite code.
      allow list: if isAuth();
    }
  }
}
