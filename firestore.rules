rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOfficeMember(officeId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid));
    }

    function isOfficeAdminOrOwner(officeId) {
      return isOfficeMember(officeId) &&
             (get(/databases/$(database)/documents/offices/$(officeId)/members/$(request.auth.uid)).data.role in ['Admin', 'Owner']);
    }

    function isOfficeOwner(officeId) {
       return isAuthenticated() &&
              get(/databases/$(database)/documents/offices/$(officeId)).data.ownerId == request.auth.uid;
    }

    // --- Top Level User Collections ---
    match /userProfiles/{userId} {
      // FIX: This rule allows searching for users by email, which is needed for the "Add Member by Email" feature.
      allow list: if isAuthenticated();
      // Users can get, update, or delete their own profile.
      allow get, update, delete: if request.auth.uid == userId;
      // Users can create their own profile.
      allow create: if request.auth.uid == userId;
    }

    // This block handles user-specific subcollections like their office memberships, notifications, and goals.
    match /users/{userId} {
      // User can manage their own notifications and goals subcollections.
      match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /goals/{goalId} {
        allow read, write: if request.auth.uid == userId;
      }

      // Rules for the 'memberOfOffices' subcollection, keyed by officeId.
      match /memberOfOffices/{officeId} {
        // A user can read their own list of office memberships.
        allow read: if request.auth.uid == userId;
        // An admin/owner of an office can create a membership record for another user (accept invite).
        allow create: if isOfficeAdminOrOwner(officeId);
        // A user can delete their own membership record (leave office).
        allow delete: if request.auth.uid == userId;
        // No one should update this record directly.
        allow update: if false;
      }
    }

    // --- Top Level Chat Collection ---
    match /chatThreads/{threadId} {
      function isParticipant() {
        return get(/databases/$(database)/documents/chatThreads/$(threadId)).data.participantIds.hasAny([request.auth.uid]);
      }

      allow get, update, delete: if isParticipant();
      allow list: if isAuthenticated();
      allow create: if request.auth.uid in request.resource.data.participantIds;

      match /messages/{messageId} {
        allow read: if isParticipant();
        // A user must be a participant AND the sender to create a message.
        allow create: if isParticipant() && request.resource.data.senderId == request.auth.uid;
        // Messages are immutable.
        allow update, delete: if false;
      }
    }

    // --- Top Level Offices Collection ---
    match /offices/{officeId} {
      allow list: if isAuthenticated();
      allow get: if isOfficeMember(officeId);
      allow create: if isAuthenticated();
      allow update: if isOfficeAdminOrOwner(officeId);
      allow delete: if isOfficeOwner(officeId);

      // Subcollections of an Office
      match /members/{memberUserId} {
        allow read, list: if isOfficeMember(officeId);
        allow create, update: if isOfficeAdminOrOwner(officeId);
        // An admin/owner can remove other members. A member can remove themselves (leave) unless they are the owner.
        allow delete: if (isOfficeAdminOrOwner(officeId) && request.auth.uid != memberUserId) ||
                         (request.auth.uid == memberUserId && !isOfficeOwner(officeId));
      }

      match /rooms/{roomId} {
        allow read, list: if isOfficeMember(officeId);
        allow create, update, delete: if isOfficeAdminOrOwner(officeId);
      }

      match /activityLog/{activityId} {
        allow read, list: if isOfficeMember(officeId);
        allow write: if false; // Writes should be server-side or via a more secure mechanism.
      }

      match /tasks/{taskId} {
        allow read, list, create, update, delete: if isOfficeMember(officeId);
      }

      match /meetings/{meetingId} {
        allow read, list, create, update, delete: if isOfficeMember(officeId);
      }

      match /generalMessages/{messageId} {
        allow read, list, create: if isOfficeMember(officeId);
        allow update, delete: if false;
      }

      match /joinRequests/{requestId} {
        allow create: if isAuthenticated();
        allow read, list, update, delete: if isOfficeAdminOrOwner(officeId);
      }
    }
  }
}
